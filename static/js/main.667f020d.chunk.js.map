{"version":3,"sources":["floors/f0.js","floors/f1.js","App.js","serviceWorker.js","index.js"],"names":["F0","f0Data","f0Callback","id","type","placeholder","onChange","e","target","value","F1","f1Data0","f1Data1","f1Callback0","f1Callback1","className","onClick","App","useState","floor","setFloor","setF0Data","setF1Data0","setF1Data1","f0Input","f1Input0","f1Input1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAkBeA,MAhBf,YAAqC,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,WACpB,OACE,yBAAKC,GAAG,KACN,4CACA,0KACA,8BACE,2BACEC,KAAK,OACLC,YAAaJ,EACbK,SAAU,SAACC,GAAD,OAAOL,EAAWK,EAAEC,OAAOC,aCiBhCC,MA1Bf,YAA6D,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,YAC3C,OACE,yBAAKX,GAAG,KACN,uCACA,sHACA,8BACE,2BACEC,KAAK,OACLC,YAAaM,EACbL,SAAU,SAACC,GAAD,OAAOM,EAAYN,EAAEC,OAAOC,UAExC,qIACA,2BACEL,KAAK,OACLC,YAAaO,EACbN,SAAU,SAACC,GAAD,OAAOO,EAAYP,EAAEC,OAAOC,UAExC,4BAAQM,UAAU,MAAMC,QAAS,SAACT,GAAD,OAAOO,EAAY,cACjD,IADH,mBCsCOG,MAnDf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,GAFxB,mBAENjB,EAFM,KAEEoB,EAFF,OAGiBH,mBAAS,GAH1B,mBAGNP,EAHM,KAGGW,EAHH,OAIiBJ,mBAAS,GAJ1B,mBAINN,EAJM,KAIGW,EAJH,KAiBb,OACE,yBAAKR,UAAU,OACF,IAAVI,GAAe,kBAAC,EAAD,CAAIlB,OAAQA,EAAQC,WAbvB,SAACsB,GAChBH,EAAUG,MAaG,IAAVL,GACC,kBAAC,EAAD,CACER,QAASA,EACTC,QAASA,EACTC,YAdW,SAACY,GAClBH,EAAWG,IAcLX,YAZW,SAACY,GAClBH,EAAWG,MAcT,6BACE,4BACEX,UAAU,OACVC,QAAS,kBAAgB,IAAVG,GAAeC,EAASD,EAAQ,KAFjD,gBAOA,4BAAQJ,UAAU,OAAOC,QAAS,kBAAMI,EAASD,EAAQ,KAAzD,iBAlBJ,UAsBUA,EACR,6BAvBF,WAwBWlB,EACT,6BAzBF,YA0BYU,EACV,6BA3BF,YA4BYC,ICxCIe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.667f020d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction F0({ f0Data, f0Callback }) {\n  return (\n    <div id=\"0\">\n      <h1>로비</h1>\n      <p>시작하기 전 가지고 있던 시드 포인트를 입력해주세요.</p>\n      <span>\n        <input\n          type=\"text\"\n          placeholder={f0Data}\n          onChange={(e) => f0Callback(e.target.value)}\n        ></input>\n      </span>\n    </div>\n  );\n}\n\nexport default F0;\n","import React from \"react\";\n\nfunction F1({ f1Data0, f1Data1, f1Callback0, f1Callback1 }) {\n  return (\n    <div id=\"1\">\n      <h1>1층</h1>\n      <p>잡은 슬라임의 수를 입력해주세요</p>\n      <span>\n        <input\n          type=\"text\"\n          placeholder={f1Data0}\n          onChange={(e) => f1Callback0(e.target.value)}\n        ></input>\n        <p>누적 데미지를 입력해주세요(최대 2,147,483,647)</p>\n        <input\n          type=\"text\"\n          placeholder={f1Data1}\n          onChange={(e) => f1Callback1(e.target.value)}\n        ></input>\n        <button className=\"max\" onClick={(e) => f1Callback1(2147483647)}>\n          {\" \"}\n          최대\n        </button>\n      </span>\n    </div>\n  );\n}\n\nexport default F1;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport F0 from \"./floors/f0\";\nimport F1 from \"./floors/f1\";\n\nfunction App() {\n  const [floor, setFloor] = useState(0);\n  const [f0Data, setF0Data] = useState(0);\n  const [f1Data0, setF1Data0] = useState(0);\n  const [f1Data1, setF1Data1] = useState(0);\n\n  const handleF0 = (f0Input) => {\n    setF0Data(f0Input);\n  };\n\n  const handleF1_0 = (f1Input0) => {\n    setF1Data0(f1Input0);\n  };\n  const handleF1_1 = (f1Input1) => {\n    setF1Data1(f1Input1);\n  };\n\n  return (\n    <div className=\"App\">\n      {floor === 0 && <F0 f0Data={f0Data} f0Callback={handleF0} />}\n      {floor === 1 && (\n        <F1\n          f1Data0={f1Data0}\n          f1Data1={f1Data1}\n          f1Callback0={handleF1_0}\n          f1Callback1={handleF1_1}\n        />\n      )}\n      <div>\n        <button\n          className=\"prev\"\n          onClick={() => floor === 0 || setFloor(floor - 1)}\n        >\n          이전\n        </button>\n\n        <button className=\"next\" onClick={() => setFloor(floor + 1)}>\n          다음\n        </button>\n      </div>\n      floor: {floor}\n      <br />\n      f0Data: {f0Data}\n      <br />\n      f1Data0: {f1Data0}\n      <br />\n      f1Data1: {f1Data1}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}